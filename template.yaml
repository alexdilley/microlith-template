AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 1024
    Timeout: 3
    Layers:
      - !Ref SharedLayer
    Handler: index.handler
    Environment:
      Variables:
        # https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private

  CfOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access S3 bucket content only through CloudFront

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CfOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub arn:aws:s3:::${WebsiteBucket}/*

  CfDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            Id: website
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CfOriginAccessIdentity}
          - DomainName: !Join
              - .
              - - !Ref HttpApi
                - execute-api
                - !Ref AWS::Region
                - amazonaws.com
            Id: api
            CustomOriginConfig:
              OriginSSLProtocols:
                - TLSv1.2
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: website
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
          Compress: true
        CacheBehaviors:
          - PathPattern: /api/*
            TargetOriginId: api
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: whitelist
                WhitelistedNames:
                  - __Host-SID
            MinTTL: 0
            MaxTTL: 0
            DefaultTTL: 0
            Compress: true
        CustomErrorResponses:
          - ErrorCode: 403
            ErrorCachingMinTTL: 0
            ResponsePagePath: /index.html
            ResponseCode: 200
        HttpVersion: http2
        DefaultRootObject: index.html
        Enabled: true
        PriceClass: PriceClass_All

  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: shared/nodejs
      # Layers can be shared by multiple stacks – each referencing a different
      # version – so version retention is a requirement.
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: nodejs12.x

  GetHelloHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: http/get-hello/
      Events:
        HttpGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /api/hello
            Method: get

Outputs:
  CfDistributionId:
    Value: !Ref CfDistribution
  WebsiteBucketName:
    Value: !Ref WebsiteBucket
